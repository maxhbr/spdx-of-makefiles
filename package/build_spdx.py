import re
import os
import sys
import csv
import json
import logging
from datetime import datetime
import subprocess
import multiprocessing
from collections import defaultdict
from pathlib import Path

from . import spdx3_0 as spdx
# import bindings.spdx3_0 as spdx3

class SPDXBuilder:
    def __init__(self, src_dir, out_dir):
        self.src_dir = src_dir
        self.out_dir = out_dir
        if not os.path.exists(out_dir):
            os.makedirs(out_dir)
        self.out_file = Path(os.path.join(out_dir, 'spdx.jsonld'))
        self.objects = []
        self.logger = logging.getLogger('SPDXBuilder')
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(logging.StreamHandler())

        self.creation_info = self.get_creation_info()

    def get_creation_info(self):
        self.logger.info('Getting creation info')
        info = spdx.CreationInfo()
        info.created = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        info.comment = 'SPDX data generated by SPDXBuilder'
        info.specVersion = '3.0.0'
        # TODO: fill createdUsing
        self.objects.append(info)
        return info

    def build_spdx(self):
        self.logger.info('Building SPDX data')
        # TODO

        document = spdx.SpdxDocument()
        document.spdxId = 'SPDXRef-DOCUMENT'
        document.creationInfo = self.creation_info
        self.objects.append(document)

        self.logger.info('SPDX data have been built')

    def debug_spdx(self):
        self.logger.info('Debugging SPDX data')
        for obj in self.objects:
            self.logger.debug(obj)

    def write_spdx(self):
        self.logger.info('Writing SPDX data')
        with self.out_file.open("wb") as f:
            s = spdx.JSONLDSerializer()
            s.write(self.objects, f)


def main():
    src_dir = sys.argv[1]
    out_dir = sys.argv[2]
    builder = SPDXBuilder(src_dir, out_dir)
    builder.build_spdx()
    builder.debug_spdx()
    builder.write_spdx()
